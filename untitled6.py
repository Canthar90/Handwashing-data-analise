# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fl2B_rFw3nEJq0GcEvtC72wj2bO6x9br
"""

import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
import seaborn as sns
import matplotlib.dates as mdates
from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                               AutoMinorLocator)
import scipy.stats as stats
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

df_yearly = pd.read_csv("annual_deaths_by_clinic.csv")
df_yearly.head()

df_yearly.tail()

df_yearly.describe()

df_yearly.shape

df_yearly.columns

df_yearly.isna().values.any()

df_monthly = pd.read_csv('monthly_deaths.csv')
df_monthly.head()

df_monthly.describe()

df_monthly.shape

df_monthly.date = pd.to_datetime(df_monthly.date)

df_monthly.columns

df_monthly.isna().values.any()

print(f"Any yerly duplicates {df_yearly.duplicated().values.any()}")
print(f"Any monthly duplicates {df_monthly.duplicated().values.any()}")

(df_monthly.deaths.sum()/df_monthly.births.sum()) * 100

plt.figure(figsize=(14,8), dpi=200)
plt.title('Total Number of Monthly Births and Deaths', fontsize=18)

ax1 = plt.gca()
ax2 = ax1.twinx()

ax1.grid(color='grey', linestyle='--')

ax1.plot(df_monthly.date,
          df_monthly.births,
          color='skyblue',
          linewidth=3
          )
ax2.plot(df_monthly.date,
         df_monthly.deaths,
         color='crimson',
         linewidth=2,
         linestyle='--')
plt.show()

years = mdates.YearLocator()
months = mdates.MonthLocator()
years_fmt = mdates.DateFormatter('%Y') 


plt.figure(figsize=(14,8), dpi=200)
plt.title('Total Number of Monthly Births and Deaths', fontsize=18)
plt.yticks(fontsize=14)
plt.xticks(fontsize=14, rotation=45)

ax1 = plt.gca()
ax2 = ax1.twinx()

ax1.set_ylabel('Births', color='skyblue', fontsize=18)
ax2.set_ylabel('Deaths', color='crimson', fontsize=18)

# Using locators
ax1.set_xlim([df_monthly.date.min(), df_monthly.date.max()])
ax1.xaxis.set_major_locator(years)
ax1.xaxis.set_major_formatter(years_fmt)
ax1.xaxis.set_minor_locator(months)

ax1.grid(color='grey', linestyle='--')

ax1.plot(df_monthly.date,
         df_monthly.births,
         color='skyblue',
         linewidth=3)

ax2.plot(df_monthly.date,
         df_monthly.deaths,
         color='crimson',
         linewidth=2,
         linestyle='--'
         )

plt.show()

# Create locators for ticks on the time axis
years = mdates.YearLocator()
months = mdates.MonthLocator()
years_fmt = mdates.DateFormatter('%Y') 


plt.figure(figsize=(14,8), dpi=200)
plt.title('Total Number of Monthly Births and Deaths', fontsize=18)
plt.yticks(fontsize=14)
plt.xticks(fontsize=14, rotation=45)
 
ax1 = plt.gca()
ax2 = ax1.twinx()
 
ax1.set_ylabel('Births', color='skyblue', fontsize=18)
ax2.set_ylabel('Deaths', color='crimson', fontsize=18)
 
# Use Locators
ax1.set_xlim([df_monthly.date.min(), df_monthly.date.max()])
ax1.xaxis.set_major_locator(years)
ax1.xaxis.set_major_formatter(years_fmt)
ax1.xaxis.set_minor_locator(months)
 
ax1.grid(color='grey', linestyle='--')
 
ax1.plot(df_monthly.date, 
         df_monthly.births, 
         color='skyblue', 
         linewidth=3)
 
ax2.plot(df_monthly.date, 
         df_monthly.deaths, 
         color='crimson', 
         linewidth=2, 
         linestyle='--')
 
plt.show()

line = px.line(df_yearly,
               x='year',
               y='births',
               color='clinic',
               title="Total Yearly deaths by clinic")

line.show()

line1 = px.line(df_yearly,
                x='year',
                y='deaths',
                color='clinic',
                title='Yearly deaths by clinic')
line1.show()

df_yearly['pct_deaths'] = (df_yearly.deaths/df_yearly.births) * 100
df_yearly.head()

averages_yearly = df_yearly.groupby('clinic').mean()
averages_yearly

percentage = px.line(df_yearly,
                    x='year',
                    y='pct_deaths',
                    color='clinic',
                    title='Yearly death percentage')
percentage.show()

df_monthly.head()

df_monthly['pct_deaths'] = (df_monthly.deaths/df_monthly.births)*100
df_monthly.head()

prior = df_monthly[(df_monthly.date) < pd.to_datetime('1846-05-01') ]
prior.tail()

after = df_monthly[(df_monthly.date) >= pd.to_datetime('1846-05-01')]
after.head()

average_dirty_hands = prior.pct_deaths.mean()
average_clean_hands = after.pct_deaths.mean()
print(f"average percentage befote discowery of handwashing: {average_dirty_hands}% , \n and after that discovery: {average_clean_hands} ")

prior_average = prior.set_index('date')
prior_average = prior_average.rolling(window=6).mean()
prior_average

plt.figure(figsize=(14,8), dpi=200)
plt.title('Percentage of Monthly Deaths over Time', fontsize=18)
plt.yticks(fontsize=14)
plt.xticks(fontsize=14, rotation=45)
 
plt.ylabel('Percentage of Deaths', color='crimson', fontsize=18)
 
ax = plt.gca()
ax.xaxis.set_major_locator(years)
ax.xaxis.set_major_formatter(years_fmt)
ax.xaxis.set_minor_locator(months)
ax.set_xlim([(df_monthly.date.min()), (df_monthly.date.max())])
 
plt.grid(color='grey', linestyle='--')
 
ma_line, = plt.plot(prior_average.index, 
                    prior_average.pct_deaths, 
                    color='crimson', 
                    linewidth=3, 
                    linestyle='--',
                    label='6m Moving Average')
bw_line, = plt.plot(prior.date, 
                    prior.pct_deaths,
                    color='black', 
                    linewidth=1, 
                    linestyle='--', 
                    label='Before Handwashing')
aw_line, = plt.plot(after.date, 
                    after.pct_deaths, 
                    color='skyblue', 
                    linewidth=3, 
                    marker='o',
                    label='After Handwashing')
 
plt.legend(handles=[ma_line, bw_line, aw_line],
           fontsize=18)
 
plt.show()

handwashing_start = pd.to_datetime('1846-05-01')
df_monthly['washing_hands'] = np.where(df_monthly.date < handwashing_start, 'No', 'Yes')

box = px.box(df_monthly,
             x='washing_hands',
             y='pct_deaths',
             color='washing_hands',
             title='How much death statistic hanged after discovery of handwashing?')

box.update_layout(xaxis_title='Washing_hands',
                  yaxis_title='Percentage of Monthly deaths')

box.show()

hist= px.histogram(df_monthly,
                    x='pct_deaths',
                    color='washing_hands',
                    nbins=30,
                    opacity=0.6,
                    barmode='overlay',
                    histnorm='percent',
                    marginal='box')

hist.update_layout(xaxis_title='Proportion of monthly deaths',
                   yaxis_title='Count')
hist.show()

plt.figure(dpi=200)
sns.kdeplot(prior.pct_deaths, shade=True)

sns.kdeplot(after.pct_deaths, shade=True)
plt.title('Est. Distribution of monthly death before and after discovey of hadnwashing')
plt.xlim(0,40)
plt.show()

t_stat, p_value = stats.ttest_ind(a=prior.pct_deaths,
                                   b=after.pct_deaths)
print(f"paule is { p_value:.10f}")
print(f"t-statistics is {t_stat:.4}")